# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ç—å—é –∏ —Å json
import requests
import json
# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è –±–æ—Ç–∞
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from fsm.app.admin_authorization.pkpvd_authorization_admin import PkpvdAuthorization
# –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å, —Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ
# from app.pkpvd_authorization.pkpvd_authorization_admin import pkpvdAuthorization

from aiogram.types import ParseMode
# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from fsm.app.config_reader import load_config
# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
config = load_config("config/bot.ini")
# –ü–æ–ª—É—á–µ–Ω–∏–µ id –∞–¥–º–∏–Ω –≥—Ä—É–ø–ø—ã
admin_group_id = int(config.tg_bot.admin_group_id)
# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–∫ –ø–≤–¥
regexp_pkpvd = '.*–ø–∫\s–ø–≤–¥.*|.*–ø–≤–¥.*'
# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º —Å –ø–∫ –ø–≤–¥
available_pkpvd_problems = ["–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –∑–∞–≤–∏—Å–∞–µ—Ç –ü–ö –ü–í–î", "–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏"]
# –°–ª–æ–≤–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—à–∏–±–æ–∫ –∏ —Ä–µ—à–µ–Ω–∏–π –∫ –Ω–∏–º
available_pkpvd_errors = {
    'Duplicate unique value [usage Purpose] declared for identity constraint of element \"note Group\".':
        '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ \n1.–ù–∞–π—Ç–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ –≤–æ–π—Ç–∏ –≤ –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, –≤—Ä—É—á–Ω—É—é –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫—É ¬´–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–¥–∞–Ω–∏—è¬ª (–Ω–∞–∂–∞—Ç—å –Ω–∞ —Å–µ—Ä—ã–π –∫—Ä–µ—Å—Ç–∏–∫)'
        '\n2.–í –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∂–∏–ª–æ–µ –∏–ª–∏ –Ω–µ–∂–∏–ª–æ–µ \n3.–í—ã–±—Ä–∞—Ç—å –≤–∏–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
    '–∫–∏—Ä–∏–ª–ª–∏—Ü–∞, –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã, "The value"': '–ù–µ—Ç–æ—á–Ω–æ —É–∫–∞–∑–∞–Ω–∞ –ø–æ—á—Ç–∞',
    '—É–∫–∞–∑–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤–∏–¥–∞ [1-0, a-Z, –∞-–Ø]': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–æ–ª—è',
    './doc:idPayer': '–í "–ü–ª–∞—Ç—ë–∂–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö" –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ "–ü–ª–∞—Ç–µ–ª—å—â–∏–∫"',
    'acceptActionNotification':
        '–í –ø–æ–ª–µ "–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤" —Å–ª–µ–¥—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–æ–ª—è ‚Ññ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∞–¥—Ä–µ—Å–∞ e-mail, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã',
    'Duplicate key value [...] declared for identity constraint of element "statementFormChangeRegisteredStatement"':
        '–í –∑–∞—è–≤–ª–µ–Ω–∏–∏ –¥–≤–∞ –∑–∞—è–≤–∏—Ç–µ–ª—è',
    'cvc-pattern-valid: Value \'008002099000\' is not facet-valid with respect to pattern \'008001\d{6}\' for type':
        '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤—ã–±—Ä–∞–ª —Ç–∏–ø "–ò–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç"'
}
# –î—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
other_functions = "<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:</i> \n" \
                  "<b>–ê–ò–°, –ü–ö –ü–í–î, 1C, –û—á–µ—Ä–µ–¥—å</b> \n" \
                  "/ais - üñ•Ô∏è –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ê–ò–° \n" \
                  "/pkpvd - üìã –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ü–ö –ü–í–î \n" \
                  "/1c - üìö –≤–æ–ø—Ä–æ—Å—ã –ø–æ 1C \n" \
                  "/queue - ‚è≥ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ \n" \
                  "<b>–¢–µ—Ö–Ω–∏–∫–∞ –∏ –¥—Ä—É–≥–æ–µ</b> \n" \
                  "/printer - üñ®Ô∏è –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–∏–Ω—Ç–µ—Ä—É \n" \
                  "/cancel - üö´ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ "

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∫ –ø–≤–¥
class OrderPkpvd(StatesGroup):
    waiting_for_pkpvd_problem = State()
    waiting_for_other_pkpvd_problem = State()
    waiting_for_pkpvd_request_problem = State()
    waiting_for_pkpvd_request_problem_try_again = State()

# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –ø–∫ –ø–≤–¥
async def pkpvd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).row(*available_pkpvd_problems)
    # for name in available_pkpvd_problems:
    #     keyboard.add(name)
    await message.answer("üìã –ö–∞–∫–∞—è —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º–∞ —Å –ü–ö –ü–í–î? ", reply_markup=keyboard)
    await OrderPkpvd.waiting_for_pkpvd_problem.set()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∫ –ø–≤–¥
async def pkpvd_problem_chosen(message: types.Message, state: FSMContext):
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ —Å –∫–Ω–æ–ø–∫–∏
    if message.text not in available_pkpvd_problems:
        # –ë–æ—Ç —Å–æ–æ–±—â–∏—Ç —á—Ç–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–Ω–æ–ø–∫–∏
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ. ‚ö†")
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –ø—Ä–æ–±–ª–µ–º–∞–∏ –ø–≤–¥
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).row(*available_pkpvd_problems)
        # –ë–æ—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É —Å –ø–≤–¥
        await message.answer("üìã –ö–∞–∫–∞—è —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º–∞ —Å –ü–ö –ü–í–î? ", reply_markup=keyboard)
        return
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    if message.text in available_pkpvd_problems:
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º
        if message.text == available_pkpvd_problems[len(available_pkpvd_problems) - 1]:
            # –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            await state.update_data(chosen_pkpvd_request_problem=message.text.lower())
            # –ë–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è
            await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è",
                                 reply_markup=types.ReplyKeyboardRemove())
            # –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π –æ–±—Ä–∞—â–µ–Ω–∏—è
            await OrderPkpvd.waiting_for_pkpvd_request_problem.set()
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç —Å –¥—Ä—É–≥–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π –ø–æ –ø–∫ –ø–≤–¥
        else:
            # –ë–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –ø–∫ –ø–≤–¥
            await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è —É –≤–∞—Å —Å–ª—É—á–∏–ª–∞—Å—å —Å –ü–ö –ü–í–î. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø—Ä–æ–±–ª–µ–º–æ–π.",
                                 reply_markup=types.ReplyKeyboardRemove())
            # –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –¥—Ä—É–≥–æ–π –ø—Ä–æ–±–ª–µ–º–µ —Å –ø–∫ –ø–≤–¥
            await OrderPkpvd.waiting_for_other_pkpvd_problem.set()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º —Å –ø–∫ –ø–≤–¥
async def pkpvd_other_problem_chosen(message: types.Message, state: FSMContext):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç
    if message.content_type == 'document':
        # –û—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø—É
        answer_to_group = f"üìã ‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å –ü–ö –ü–í–î..."
        # –ë–æ—Ç —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ –≤—ã—Å–ª–∞–ª –≤ it-–æ—Ç–¥–µ–ª
        await message.reply('–í—ã—Å–ª–∞–ª IT-–æ—Ç–¥–µ–ª—É', reply_markup=types.ReplyKeyboardRemove())
        # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        # –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        await message.bot.send_message(admin_group_id, answer_to_group)
        # –ë–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É
        await message.forward(admin_group_id)
        # –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        # msg_document = message.document.file_id
        # print("msg doc "+msg_document)
        # await message.bot.send_document(admin_group_id, msg_document)
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    elif message.content_type == 'photo':
        # –û—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø—É
        answer_to_group = f"üìã ‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å –ü–ö –ü–í–î..."
        # –ë–æ—Ç —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ –≤—ã—Å–ª–∞–ª –≤ it-–æ—Ç–¥–µ–ª
        await message.reply('–í—ã—Å–ª–∞–ª IT-–æ—Ç–¥–µ–ª—É', reply_markup=types.ReplyKeyboardRemove())
        # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        # –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        await message.bot.send_message(admin_group_id, answer_to_group)
        # –ë–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É
        await message.forward(admin_group_id)
        # –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    elif message.content_type == 'text':
        print("test text")
        # –ó–∞–ø–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        await state.update_data(chosen_pkpvd_problem=message.text.lower())
        # –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        user_data = await state.get_data()
        # –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        answer_to_message = f"‚ö† –£ –≤–∞—Å —Ç–µ–∫—É—â–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –ü–ö –ü–í–î: {user_data['chosen_pkpvd_problem'].lower()} \n IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏..."
        # –û—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø—É
        answer_to_group = f"üìã ‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å –ü–ö –ü–í–î: {user_data['chosen_pkpvd_problem'].lower()}"
        # –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.reply(answer_to_message, reply_markup=types.ReplyKeyboardRemove())
        # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        # –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        await message.bot.send_message(admin_group_id, answer_to_group)
        # –ë–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É
        await message.forward(admin_group_id)
        # –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
    # return SendMessage(admin_group_id, answer_to_group)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–º–µ—Ä–æ–º –æ–±—Ä–∞—â–µ–Ω–∏—è
async def pkpvd_request_problem(message: types.Message, state: FSMContext):
    # –ë–æ—Ç —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ –∏—â–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    await message.answer("‚ö† ‚è±Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏—â—É —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã...",
                         reply_markup=types.ReplyKeyboardRemove())
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ PkpvdAuthorization
    pkpvd_author = PkpvdAuthorization()
    # –°—á–∏—Ç–∞—Ç—å cookie —Å —Ñ–∞–π–ª–∞
    cookie_pkpvd = await pkpvd_author.read_cookie_from_file()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ cookie
    isCookieValid = await pkpvd_author.check_if_cookie_valid(cookie_pkpvd)
    # –ï—Å–ª–∏ cookie –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
    if not isCookieValid:
        # –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π cookie
        cookie_pkpvd = await pkpvd_author.admin_authorization()
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å cookie –≤ —Ñ–∞–π–ª
        await pkpvd_author.save_data_to_file(cookie_pkpvd)

    # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –ø–∫ –ø–≤–¥ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å
    if cookie_pkpvd == "":
        await message.answer("‚ùó –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –≤ –ü–ö –ü–í–î. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ IT-–æ—Ç–¥–µ–ª", reply_markup=types.ReplyKeyboardRemove())
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        # –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        return
    # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –ø–∫ –ø–≤–¥ —É—Å–ø–µ—à–Ω–∞
    # –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    number_of_req = message.text.upper()
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –Ω–æ–º–µ—Ä–æ–º –æ–±—Ä–∞—â–µ–Ω–∏—è
    responseAppeal = requests.get(
        'http://10.42.200.207/api/rs/appeal/search2?page=0&size=5&sort=createDate,desc&startWith=false&internalNum='+number_of_req+'&packageNum'
        '=&statusNotePPOZ=&currentStep=&createDateFrom=&createDateTill=&createWho=&moveStepDate=&kudNum=&routineExecutionDays=&processingEndDateFrom='
        '&processingEndDateTill=&typeGosUslug=&cn=&textApplicants=',
        headers={'Cookie': 'JSESSIONID=' + cookie_pkpvd})
    # –ü–æ–ª—É—á–∏—Ç—å json
    resp_json = responseAppeal.text
    # –ü—Ä–æ—á–∏—Ç–∞—Ç—å json
    parsed_string = json.loads(resp_json)
    # –ï—Å–ª–∏ content json –ø—É—Å—Ç–æ–π
    if len(parsed_string['content']) == 0:
        # –ë–æ—Ç —Å–æ–æ–±—â–∏—Ç, —á—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        await message.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.row('–¥–∞', '–Ω–µ—Ç')
        # –ë–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑ –Ω–∞–π—Ç–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ
        await message.answer("–ü–æ–±—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?", reply_markup=keyboard)
        # –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–æ–º –ø–æ–ø—ã—Ç–∫–∏
        await OrderPkpvd.waiting_for_pkpvd_request_problem_try_again.set()
    # –ï—Å–ª–∏ content json –Ω–µ –ø—É—Å—Ç–æ–π
    else:
        # –ü–∞—Ä—Å–∏–º id –æ–±—Ä–∞—â–µ–Ω–∏—è
        id_appeal = parsed_string['content'][0]['id']
        print("JSON Appeal: ", parsed_string)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å Statement
        responseStatement = requests.get('http://10.42.200.207/api/rs/appeal/' + id_appeal + '/statement?page=0&size=5',
                                         headers={'Cookie': 'JSESSIONID=' + cookie_pkpvd})
        # –ü–æ–ª—É—á–∞–µ–º json
        resp_json = responseStatement.text
        parsed_string = json.loads(resp_json)
        # –ü–∞—Ä—Å–∏–º id statement
        id_statement = parsed_string['content'][0]['id']
        print("JSON Statement: ", parsed_string)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç
        responseFindErrror = requests.get(
            'http://10.42.200.207/api/rs/appeal/' + id_appeal + '/' + id_statement + '/printstatement',
            headers={'Cookie': 'JSESSIONID=' + cookie_pkpvd})
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        resp_document = responseFindErrror.text
        # parsed_string = json.loads(resp_json)
        # print("JSON print document: ", resp_document)
        # –ë—É–ª–µ–≤–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –≤ –∑–∞—è–≤–ª–µ–Ω–∏–∏ –∏–ª–∏ –Ω–µ—Ç
        isDocError = True
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ json –µ—Å—Ç—å, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –∏–Ω–∞—á–µ –Ω–µ—Ç –æ—à–∏–±–∫–∏
        try:
            json.loads(resp_document)
        except ValueError as err:
            isDocError = False

        print('–î–æ–∫—É–º–µ–Ω—Ç —Å –æ—à–∏–±–∫–æ–π? ' + str(isDocError))
        # –ü–µ—Ä–µ–ø–µ–Ω–Ω–∞—è –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
        documentCorrect = "–° –≤–∞—à–∏–º –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ."
        # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å –æ—à–∏–±–∫–æ–π
        if isDocError:
            # –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç json
            parsed_document_error = json.loads(resp_document)
            # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –æ—à–∏–±–∫–∏
            code_error = parsed_document_error['status']
            # –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
            message_error = parsed_document_error['message']
            # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ –∫–æ—Ç–æ—Ä–æ–π —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, —á—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            fix_not_found = '–†–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
            list_code_errors = list(available_pkpvd_errors.keys())
            # print(list_code_errors[0])
            solveError = 'Not solved'
            # –ò–¥–µ–º –ø–æ —Å–ø–∏—Å–∫—É –æ—à–∏–±–æ–∫
            for i in range(len(available_pkpvd_errors)):
                print('\n' + '–û—à–∏–±–∫–∞: ' + list_code_errors[i])
                # –ò—â–µ–º –æ—à–∏–±–∫—É —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏
                index = message_error.find(list_code_errors[i])
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                if index == -1:
                    print('Not found')
                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                else:
                    print('–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π: ' + available_pkpvd_errors[list_code_errors[i]])
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                    solveError = available_pkpvd_errors[list_code_errors[i]]
                    break
            # –ï—Å–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            if solveError == 'Not solved':
                print('–†–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...')
                # –ë–æ—Ç —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                await message.answer(fix_not_found)
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                keyboard.row('–¥–∞', '–Ω–µ—Ç')
                # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑
                await message.answer("–ü–æ–±—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?", reply_markup=keyboard)
                # –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await OrderPkpvd.waiting_for_pkpvd_request_problem_try_again.set()
            # –ï—Å–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ
            else:
                print('–ö–∞–∫ —Ä–µ—à–∏—Ç—å: ' + solveError)
                # –ë–æ—Ç —Å–æ–æ–±—â–∞–µ—Ç, –∫–∞–∫ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É
                await message.answer(solveError)
                # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –ø–æ–≤—Ç–æ—Ä–æ–º
                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                keyboard.row('–¥–∞', '–Ω–µ—Ç')
                # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑
                await message.answer("–ü–æ–±—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?", reply_markup=keyboard)
                # –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
                await OrderPkpvd.waiting_for_pkpvd_request_problem_try_again.set()
        # –ï—Å–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–µ—Ç –æ—à–∏–±–æ–∫
        else:
            # –ë–æ—Ç —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ
            await message.answer(documentCorrect)
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.row('–¥–∞', '–Ω–µ—Ç')
            # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑
            await message.answer("–ü–æ–±—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?", reply_markup=keyboard)
            # –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
            await OrderPkpvd.waiting_for_pkpvd_request_problem_try_again.set()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞–π—Ç–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ
async def pkpvd_request_problem_try_again(message: types.Message, state: FSMContext):
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–¥–∞"
    if message.text.lower() == '–¥–∞':
        # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è",
                             reply_markup=types.ReplyKeyboardRemove())
        # –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ø–æ–∏—Å–∫–æ–º –æ–±—Ä–∞—â–µ–Ω–∏—è
        await OrderPkpvd.waiting_for_pkpvd_request_problem.set()
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–Ω–µ—Ç"
    elif message.text.lower() == '–Ω–µ—Ç':
        # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        # –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
    # –ò–Ω–∞—á–µ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ —Å –∫–Ω–æ–ø–∫–∏
    else:
        # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–Ω–æ–ø–∫–∏
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∏–∂–µ\n"
                             "–ü–æ–±—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è –ø–∫ –ø–≤–¥
def register_handlers_pkpvd(dp: Dispatcher):
    # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Å –ø–∫ –ø–≤–¥
    dp.register_message_handler(pkpvd_start, commands="pkpvd", state="*")
    # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∫ –ø–≤–¥
    dp.register_message_handler(pkpvd_problem_chosen, state=OrderPkpvd.waiting_for_pkpvd_problem)
    # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º
    dp.register_message_handler(pkpvd_request_problem, state=OrderPkpvd.waiting_for_pkpvd_request_problem)
    # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
    dp.register_message_handler(pkpvd_request_problem_try_again, state=OrderPkpvd.waiting_for_pkpvd_request_problem_try_again)
    # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–π –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∫ –ø–≤–¥
    dp.register_message_handler(pkpvd_other_problem_chosen, content_types=types.ContentType.all(), state=OrderPkpvd.waiting_for_other_pkpvd_problem)
    # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    dp.register_message_handler(pkpvd_start, regexp=regexp_pkpvd, state="*")

