import requests
import json
import re
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from fsm.app.admin_authorization.ais_authorization_admin import AisAuthorization
# –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å, —Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ
# from app.admin_authorization.ais_authorization_admin import AisAuthorization
from fsm.app.config_reader import load_config
from aiogram.types import ParseMode

config = load_config("config/bot.ini")
admin_group_id = int(config.tg_bot.admin_group_id)

available_ais_problems = ["–ø—Ä–æ–±–ª–µ–º–∞ —Å –ê–ò–°", "–ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞—è–≤–ª–µ–Ω–∏–µ–º –≤ –ê–ò–°"]
available_ais_errors = {
    'RejectionReasonCode: NO_DATA RejectionReasonDescription:': '–í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.',
    'Question2': 'answer2',
    'Question3': 'answer3'
    }

other_functions = "<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:</i> \n" \
                  "<b>–ê–ò–°, –ü–ö –ü–í–î, 1C, –û—á–µ—Ä–µ–¥—å</b> \n" \
                  "/ais - üñ•Ô∏è –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ê–ò–° \n" \
                  "/pkpvd - üìã –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ü–ö –ü–í–î \n" \
                  "/1c - üìö –≤–æ–ø—Ä–æ—Å—ã –ø–æ 1C \n" \
                  "/queue - ‚è≥ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ \n" \
                  "<b>–¢–µ—Ö–Ω–∏–∫–∞ –∏ –¥—Ä—É–≥–æ–µ</b> \n" \
                  "/printer - üñ®Ô∏è –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–∏–Ω—Ç–µ—Ä—É \n" \
                  "/cancel - üö´ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ "

class OrderAis(StatesGroup):
    waiting_for_ais_problem = State()
    waiting_for_other_ais_problem = State()
    waiting_for_ais_request_problem = State()
    waiting_for_ais_request_problem_try_again = State()


async def ais_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).row(*available_ais_problems)
    # for name in available_ais_problems:
    #     keyboard.add(name)
    await message.answer("üñ•Ô∏è –ö–∞–∫–∞—è —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º–∞ —Å –ê–ò–°? ", reply_markup=keyboard)
    await OrderAis.waiting_for_ais_problem.set()


async def ais_problem_chosen(message: types.Message, state: FSMContext):
    if message.text not in available_ais_problems:
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ. ‚ö†")
        return
    if message.text in available_ais_problems:
        if message.text == available_ais_problems[len(available_ais_problems) - 1]:
            await state.update_data(chosen_ais_request_problem=message.text.lower())
            await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –∑–∞—è–≤–ª–µ–Ω–∏—è \n‚ùó (–¢–û–õ–¨–ö–û –¶–ò–§–†–´)",
                                 reply_markup=types.ReplyKeyboardRemove())
            await OrderAis.waiting_for_ais_request_problem.set()
        else:
            await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è —É –≤–∞—Å —Å–ª—É—á–∏–ª–∞—Å—å —Å –ê–ò–°. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø—Ä–æ–±–ª–µ–º–æ–π.",
                                 reply_markup=types.ReplyKeyboardRemove())
            await OrderAis.waiting_for_other_ais_problem.set()


async def ais_other_problem_chosen(message: types.Message, state: FSMContext):
    if message.content_type == 'document':
        answer_to_group = f"üñ•Ô∏è ‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å –ê–ò–°..."
        await message.reply('–í—ã—Å–ª–∞–ª IT-–æ—Ç–¥–µ–ª—É', reply_markup=types.ReplyKeyboardRemove())
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        await message.bot.send_message(admin_group_id, answer_to_group)
        await message.forward(admin_group_id)
        await state.finish()
        # msg_document = message.document.file_id
        # print("msg doc "+msg_document)
        # await message.bot.send_document(admin_group_id, msg_document)
    elif message.content_type == 'photo':
        answer_to_group = f"üñ•Ô∏è ‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å –ê–ò–°..."
        await message.reply('–í—ã—Å–ª–∞–ª IT-–æ—Ç–¥–µ–ª—É', reply_markup=types.ReplyKeyboardRemove())
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        await message.bot.send_message(admin_group_id, answer_to_group)
        await message.forward(admin_group_id)
        await state.finish()
    elif message.content_type == 'text':
        print("test text")
        await state.update_data(chosen_ais_problem=message.text.lower())
        user_data = await state.get_data()
        answer_to_message = f"‚ö† –£ –≤–∞—Å —Ç–µ–∫—É—â–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –ê–ò–°: {user_data['chosen_ais_problem'].lower()} \n IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏..."
        answer_to_group = f"üñ•Ô∏è ‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å –ê–ò–°: {user_data['chosen_ais_problem'].lower()}"
        await message.reply(answer_to_message, reply_markup=types.ReplyKeyboardRemove())
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        await message.bot.send_message(admin_group_id, answer_to_group)
        await message.forward(admin_group_id)
        await state.finish()
    # return SendMessage(admin_group_id, answer_to_group)


async def ais_request_problem(message: types.Message, state: FSMContext):
    await message.answer("‚ö† ‚è±Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏—â—É —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã...",
                         reply_markup=types.ReplyKeyboardRemove())
    ais_author = AisAuthorization()
    cookie_ais = await ais_author.read_cookie_from_file()
    isCookieValid = await ais_author.check_if_cookie_valid(cookie_ais)
    if not isCookieValid:
        cookie_ais = await ais_author.admin_authorization()
        await ais_author.save_data_to_file(cookie_ais)
    # numberreq = '7303506'
    number_of_req = message.text
    payload = {"action": "orderService", "method": "getOrderHistory", "data": [number_of_req, False], "type": "rpc",
               "tid": 23}
    response = requests.post(
        'http://192.168.99.91/cpgu/action/router',
        headers={'Cookie': 'JSESSIONID='+cookie_ais},
        json=payload)

    resp_json = response.text
    parsed_string = json.loads(resp_json)
    print("JSON: ", parsed_string)

    request_not_found = '‚ö† –ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–ª–µ–Ω–∏—è...'
    json_type = parsed_string[0]['type']
    if json_type == 'rpc':
        result = parsed_string[0]['result']
        result_size = len(result)
        error_text = parsed_string[0]['result'][result_size - 1]['comment']
        fix_not_found = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–µ—à–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n' \
                        '–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ –∏—Å—á–µ–∑–Ω–µ—Ç, —Ç–æ–≥–¥–∞ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –≤ IT-–æ—Ç–¥–µ–ª'

        list_code_errors = list(available_ais_errors.keys())
        # print(list_code_errors[0])
        solveError = 'Not solved'
        for i in range(len(available_ais_errors)):
            print('\n' + '–û—à–∏–±–∫–∞: ' + list_code_errors[i])
            result_re = re.match(list_code_errors[i], error_text)
            if result_re is None:
                print('Not found')
            else:
                print('–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π: ' + result_re.group(0))
                solveError = available_ais_errors[list_code_errors[i]]
                break

        if solveError == 'Not solved':
            print('–†–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...')
            await message.answer(fix_not_found)
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.row('–¥–∞', '–Ω–µ—Ç')
            await message.answer("–ü–æ–±—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?", reply_markup=keyboard)
            await OrderAis.waiting_for_ais_request_problem_try_again.set()
        else:
            print('–ö–∞–∫ —Ä–µ—à–∏—Ç—å: ' + solveError)
            await message.answer(solveError)
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.row('–¥–∞', '–Ω–µ—Ç')
            await message.answer("–ü–æ–±—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?", reply_markup=keyboard)
            await OrderAis.waiting_for_ais_request_problem_try_again.set()

    elif json_type == 'exception':
        await message.answer(request_not_found)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.row('–¥–∞', '–Ω–µ—Ç')
        await message.answer("–ü–æ–±—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?", reply_markup=keyboard)
        await OrderAis.waiting_for_ais_request_problem_try_again.set()



async def ais_request_problem_try_again(message: types.Message, state: FSMContext):
    if message.text.lower() == '–¥–∞':
        #await state.update_data(chosen_ais_request_problem=message.text.lower())
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –∑–∞—è–≤–ª–µ–Ω–∏—è \n‚ùó (–¢–û–õ–¨–ö–û –¶–ò–§–†–´)",
                             reply_markup=types.ReplyKeyboardRemove())
        await OrderAis.waiting_for_ais_request_problem.set()
    elif message.text.lower() == '–Ω–µ—Ç':
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        await state.finish()
    else:
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∏–∂–µ\n"
                             "–ü–æ–±—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?")


def register_handlers_ais(dp: Dispatcher):
    dp.register_message_handler(ais_start, commands="ais", state="*")
    dp.register_message_handler(ais_problem_chosen, state=OrderAis.waiting_for_ais_problem)
    dp.register_message_handler(ais_request_problem, state=OrderAis.waiting_for_ais_request_problem)
    dp.register_message_handler(ais_request_problem_try_again, state=OrderAis.waiting_for_ais_request_problem_try_again)
    dp.register_message_handler(ais_other_problem_chosen, content_types=types.ContentType.all(), state=OrderAis.waiting_for_other_ais_problem)
