# –ò–º–ø–æ—Ä—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
import re
# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è –±–æ—Ç–∞
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from aiogram.dispatcher.webhook import SendMessage
from aiogram.types import ParseMode

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from fsm.app.config_reader import load_config
# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
config = load_config("config/bot.ini")
# –ü–æ–ª—É—á–µ–Ω–∏–µ id –∞–¥–º–∏–Ω –≥—Ä—É–ø–ø—ã
admin_group_id = int(config.tg_bot.admin_group_id)

# –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞—Ö
# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º
regexp_printer = '.*–∫–∞—Ä—Ç—Ä–∏–¥–∂.*|.*—Ç–æ–Ω–µ—Ä.*|.*—á–µ—Ä–Ω–∏–ª.*|.*–Ω–µ.*—Ä–∞–±–æ—Ç.*|.*–Ω–µ.*–ø–µ—á–∞—Ç.*|.*–ª–æ–º–∞–ª—Å.*'
# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞–º–∏
available_printer_problems = ["–∫–∞—Ä—Ç—Ä–∏–¥–∂ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è", "–ø–ª–æ—Ö–æ –ø–µ—á–∞—Ç–∞–µ—Ç", "–Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç", "–¥—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞"]
# –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
available_printer_names = ["1025", "2540", "2235", "2035", "2530", "1030", "–¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å", "–Ω–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–¥–µ–ª—å"]
# –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
available_printer_sizes = ["–º–∞–ª–µ–Ω—å–∫–∏–π", "–±–æ–ª—å—à–æ–π", "—Å—Ç–∞—Ä—ã–π", "–Ω–æ–≤—ã–π"]
# –°–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤ –≤ –º—Ñ—Ü
available_groups_in_mfc = ["—é—Ä–∏—Å—Ç—ã", "–∫–∞–¥—Ä—ã", "–±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è", "–æ–∫–Ω–∞", "–¥—Ä—É–≥–æ–π –æ—Ç–¥–µ–ª"]
# –î—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
other_functions = "<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:</i> \n" \
                  "<b>–ê–ò–°, –ü–ö –ü–í–î, 1C, –û—á–µ—Ä–µ–¥—å</b> \n" \
                  "/ais - üñ•Ô∏è –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ê–ò–° \n" \
                  "/pkpvd - üìã –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ü–ö –ü–í–î \n" \
                  "/1c - üìö –≤–æ–ø—Ä–æ—Å—ã –ø–æ 1C \n" \
                  "/queue - ‚è≥ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ \n" \
                  "<b>–¢–µ—Ö–Ω–∏–∫–∞ –∏ –¥—Ä—É–≥–æ–µ</b> \n" \
                  "/printer - üñ®Ô∏è –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–∏–Ω—Ç–µ—Ä—É \n" \
                  "/cancel - üö´ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ "

# –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
class OrderPrinter(StatesGroup):
    waiting_for_printer_problem = State()
    waiting_for_other_printer_problem = State()
    waiting_for_unknown_printer_name = State()
    waiting_for_printer_name = State()
    waiting_for_printer_size = State()
    waiting_available_group_in_mfc = State()
    waiting_for_window = State()

# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º
async def printer_start(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞—Ö
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for name in available_printer_problems:
        keyboard.add(name)
    await message.answer("üñ®Ô∏è –ö–∞–∫–∞—è —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º?", reply_markup=keyboard)
    # –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await OrderPrinter.waiting_for_printer_problem.set()

# –í—ã–±–æ—Ä –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º
async def printer_problem_chosen(message: types.Message, state: FSMContext):
    # –í–∞—Ä–∏–∞–Ω—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ –µ—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    if message.text.lower() in available_printer_problems or re.match(regexp_printer, message.text.lower()):
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –¥—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞
        if message.text.lower() == available_printer_problems[len(available_printer_problems) - 1].lower():
            print("other")
            # –ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è —É –≤–∞—Å —Å–ª—É—á–∏–ª–∞—Å—å —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º:",
                                 reply_markup=types.ReplyKeyboardRemove())
            # –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ —Å –¥—Ä—É–≥–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π
            await OrderPrinter.waiting_for_other_printer_problem.set()
        else:  # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞
            print("yes i know my problem with printer")
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–µ
            await state.update_data(chosen_printer_problem=message.text.lower())
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True) # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            # for name in available_printer_names:
            #     keyboard.add(name)
            # –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Ä—è–¥
            keyboard.row(available_printer_names[0], available_printer_names[1])
            keyboard.row(available_printer_names[2], available_printer_names[3])
            keyboard.row(available_printer_names[4], available_printer_names[5])
            keyboard.row(available_printer_names[6])
            keyboard.row(available_printer_names[7])
            # –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
            await OrderPrinter.waiting_for_printer_name.set()
            # –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
            await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–∏–Ω—Ç–µ—Ä:", reply_markup=keyboard)
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∫–Ω–æ–ø–æ–∫, –∏–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    elif message.text.lower() not in available_printer_problems:
        # –ë–æ—Ç –ø—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ. ‚ö†")
        # –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞–º–∏
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for name in available_printer_problems:
            keyboard.add(name)
        # –ë–æ—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤ —á—ë–º –µ–≥–æ –ø—Ä–æ–±–ª–µ–º–∞
        await message.answer("üñ®Ô∏è –ö–∞–∫–∞—è —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º?", reply_markup=keyboard)
        return

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–π –ø—Ä–æ–±–ª–µ–º—ã –æ –ø—Ä–∏–Ω—Ç–µ—Ä–µ
async def printer_other_problem_chosen(message: types.Message, state: FSMContext):
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–µ
    await state.update_data(chosen_printer_problem=message.text.lower())
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–∫–Ω–æ–ø–∫–∏)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # for name in available_printer_names:
    #     keyboard.add(name)
    # –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    keyboard.row(available_printer_names[0], available_printer_names[1])
    keyboard.row(available_printer_names[2], available_printer_names[3])
    keyboard.row(available_printer_names[4], available_printer_names[5])
    keyboard.row(available_printer_names[6])
    keyboard.row(available_printer_names[7])
    # –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –º–æ–¥–µ–ª—è–º–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
    await OrderPrinter.waiting_for_printer_name.set()
    # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
    await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–∏–Ω—Ç–µ—Ä:", reply_markup=keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
async def printer_chosen(message: types.Message, state: FSMContext):
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ —Å –∫–Ω–æ–ø–∫–∏
    if message.text.lower() not in available_printer_names:
        # –ë–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–Ω–æ–ø–∫–∏
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ.")
        return
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–Ω–æ–ø–∫–∏
    if message.text.lower() in available_printer_names:
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
        if message.text.lower() == available_printer_names[len(available_printer_names) - 2].lower():
            print("unknown model")
            # –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await OrderPrinter.waiting_for_unknown_printer_name.set()
            # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
            await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞", reply_markup=types.ReplyKeyboardRemove())
        # –ò–Ω–∞—á–µ, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
        elif message.text.lower() == available_printer_names[len(available_printer_names) - 1]:
            print("other")
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            # for size in available_printer_sizes:
            #     keyboard.add(size)
            # –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥
            keyboard.row(available_printer_sizes[0], available_printer_sizes[1])
            keyboard.row(available_printer_sizes[2], available_printer_sizes[3])
            # –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Ä–∞–∑–º–µ—Ä –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
            await OrderPrinter.waiting_for_printer_size.set()
            # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
            await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞:", reply_markup=keyboard)
        # –ò–Ω–∞—á–µ, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å
        else:
            print("chosen model")
            # –î–æ–±–∞–≤–∏—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
            await state.update_data(chosen_printer=message.text.lower())
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            # for size in available_groups_in_mfc:
            #     keyboard.add(size)
            # –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥
            keyboard.row(available_groups_in_mfc[0], available_groups_in_mfc[1])
            keyboard.row(available_groups_in_mfc[2], available_groups_in_mfc[3])
            keyboard.row(available_groups_in_mfc[4])
            # –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –æ—Ç–¥–µ–ª–∞–º–∏ –º—Ñ—Ü
            await OrderPrinter.waiting_available_group_in_mfc.set()
            # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –æ—Ç–¥–µ–ª
            await message.answer("‚ö† –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª...", reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
async def unknown_model_printer(message: types.Message, state: FSMContext):
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    await state.update_data(chosen_printer=message.text.lower())
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥
    keyboard.row(available_groups_in_mfc[0], available_groups_in_mfc[1])
    keyboard.row(available_groups_in_mfc[2], available_groups_in_mfc[3])
    keyboard.row(available_groups_in_mfc[4])
    # for size in available_groups_in_mfc:
    #     keyboard.row(size)
    # –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –≤—ã–±–æ—Ä –æ—Ç–¥–µ–ª–æ–≤ –º—Ñ—Ü
    await OrderPrinter.waiting_available_group_in_mfc.set()
    # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –æ—Ç–¥–µ–ª
    await message.answer("‚ö† –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª...", reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
async def printer_size_chosen(message: types.Message, state: FSMContext):
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if message.text.lower() not in available_printer_sizes:
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ. ‚ö†")
        return
    # –î–æ–±–∞–≤–∏–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–∏–Ω—Ç–µ—Ä–µ
    await state.update_data(chosen_printer=message.text.lower())
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # for size in available_groups_in_mfc:
    #     keyboard.add(size)
    # –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥
    keyboard.row(available_groups_in_mfc[0], available_groups_in_mfc[1])
    keyboard.row(available_groups_in_mfc[2], available_groups_in_mfc[3])
    keyboard.row(available_groups_in_mfc[4])
    # –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–¥–µ–ª–æ–≤ –º—Ñ—Ü
    await OrderPrinter.waiting_available_group_in_mfc.set()
    # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –æ—Ç–¥–µ–ª
    await message.answer("‚ö† –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª...", reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª–æ–≤ –º—Ñ—Ü
async def group_in_mfc_chosen(message: types.Message, state: FSMContext):
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ —Å –∫–Ω–æ–ø–∫–∏
    if message.text.lower() not in available_groups_in_mfc:
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ. ‚ö†")
        return
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –æ–∫–Ω–∞
    if message.text.lower() == "–æ–∫–Ω–∞":
        # –î–æ–±–∞–≤–∏—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await state.update_data(chosen_window_mfc=message.text.lower())
        # –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è - –≤—ã–±–æ—Ä –æ–∫–Ω–∞
        await OrderPrinter.waiting_for_window.set()
        # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –æ–∫–Ω–æ
        await message.answer("‚ö† –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –æ–∫–Ω–æ...", reply_markup=types.ReplyKeyboardRemove())
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    else:
        # –î–æ–±–∞–≤–∏—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–¥–µ–ª–µ
        await state.update_data(chosen_group_mfc=message.text.lower())
        # –°—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        user_data = await state.get_data()
        # –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        answer_text = f"üñ®Ô∏è –° –≤–∞—à–∏–º –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º —Ç–∞–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞: \"{user_data['chosen_printer_problem'].lower()}\".\n" \
                      f"–í–∞—à –ø—Ä–∏–Ω—Ç–µ—Ä: {user_data['chosen_printer'].upper()}, –æ–∫–Ω–æ/–æ—Ç–¥–µ–ª: {user_data['chosen_group_mfc'].upper()}.\n" \
                      "‚õπ IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ –ø–æ–¥–æ–π–¥–µ—Ç –∫ –≤–∞–º.  –û–∂–∏–¥–∞–π—Ç–µ..."
        # –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –º—Ñ—Ü
        answer_to_group = f"üñ®Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º: \"{user_data['chosen_printer_problem'].lower()}\".\n" \
                          f"–ü—Ä–∏–Ω—Ç–µ—Ä: {user_data['chosen_printer'].upper()}, –æ–∫–Ω–æ/–æ—Ç–¥–µ–ª: {message.text.upper()}.\n" \
                          "–¢—Ä–µ–±—É—é—Ç –∞–π—Ç–∏—à–Ω–∏–∫–∞! üöÄüöÄüöÄ\n"
        # –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(answer_text, reply_markup=types.ReplyKeyboardRemove())
        # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        # –ë–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É
        await message.forward(admin_group_id)
        # –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        # –ë–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –ø–æ –ø—Ä–∏–Ω—Ç–µ—Ä—É –≤ –≥—Ä—É–ø–ø—É
        return SendMessage(admin_group_id, answer_to_group)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–∫–Ω–∞
async def window_chosen(message: types.Message, state: FSMContext):
    # –°—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    user_data = await state.get_data()
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    answer_text = f"üñ®Ô∏è –° –≤–∞—à–∏–º –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º —Ç–∞–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞: \"{user_data['chosen_printer_problem'].lower()}\".\n" \
                  f"–í–∞—à –ø—Ä–∏–Ω—Ç–µ—Ä: {user_data['chosen_printer'].upper()}, –æ–∫–Ω–æ/–æ—Ç–¥–µ–ª: {message.text.upper()}.\n" \
                  "‚õπ IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ –ø–æ–¥–æ–π–¥–µ—Ç –∫ –≤–∞–º.  –û–∂–∏–¥–∞–π—Ç–µ..."
    # –û—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø—É
    answer_to_group = f"üñ®Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º: \"{user_data['chosen_printer_problem'].lower()}\".\n" \
                      f"–ü—Ä–∏–Ω—Ç–µ—Ä: {user_data['chosen_printer'].upper()}, –æ–∫–Ω–æ/–æ—Ç–¥–µ–ª: {message.text.upper()}.\n" \
                      "–¢—Ä–µ–±—É—é—Ç –∞–π—Ç–∏—à–Ω–∏–∫–∞! üöÄüöÄüöÄ\n"
    # –ë–æ—Ç –æ—Ç—Å—ã–ª–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(answer_text, reply_markup=types.ReplyKeyboardRemove())
    # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
    # –ë–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    await message.forward(admin_group_id)
    # –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
    # –ë–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –ø–æ –ø—Ä–∏–Ω—Ç–µ—Ä—É –≤ –≥—Ä—É–ø–ø—É
    return SendMessage(admin_group_id, answer_to_group)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ (–ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—é—Ç —Å–æ–æ–±—â–µ–Ω–∏—è)
def register_handlers_printer(dp: Dispatcher):
    # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º
    dp.register_message_handler(printer_start, commands="printer", state="*")
    # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º
    dp.register_message_handler(printer_problem_chosen, state=OrderPrinter.waiting_for_printer_problem)
    # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º
    dp.register_message_handler(printer_other_problem_chosen, state=OrderPrinter.waiting_for_other_printer_problem)
    # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
    dp.register_message_handler(printer_chosen, state=OrderPrinter.waiting_for_printer_name)
    # –•—ç–Ω–¥–ª–µ—Ä , –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
    dp.register_message_handler(unknown_model_printer, state=OrderPrinter.waiting_for_unknown_printer_name)
    # –•—ç–Ω–¥–ª–µ—Ä, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø –ø—Ä–∏–Ω—Ç–µ—Ä–∞
    dp.register_message_handler(printer_size_chosen, state=OrderPrinter.waiting_for_printer_size)
    # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª–æ–≤ –º—Ñ—Ü
    dp.register_message_handler(group_in_mfc_chosen, state=OrderPrinter.waiting_available_group_in_mfc)
    # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–∫–Ω–∞ –º—Ñ—Ü
    dp.register_message_handler(window_chosen, state=OrderPrinter.waiting_for_window)
    # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    dp.register_message_handler(printer_problem_chosen, regexp=regexp_printer, state="*")
    # –•—ç–Ω–¥–ª–µ—Ä, –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä. –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    dp.register_message_handler(printer_start, regexp=".*–ø—Ä–∏–Ω—Ç–µ—Ä.*", state="*")

