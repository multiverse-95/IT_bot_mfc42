from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode

from fsm.app.config_reader import load_config

config = load_config("config/bot.ini")
admin_group_id = int(config.tg_bot.admin_group_id)
regexp_queue = '(\W|^)–æ—á–µ—Ä–µ–¥—å.*(\W|$)|(\W|^)–ø—Ä–æ–±–ª–µ–º–∞.*–æ—á–µ—Ä–µ–¥.*(\W|$)|(\W|^)–Ω–µ\s—Ä–∞–±–æ—Ç.*–æ—á–µ—Ä–µ–¥.*(\W|$)'
available_queue_problems = ["–ó–∞–≤–∏—Å —Ç–∞–ª–æ–Ω", "–ó–∞–≤–∏—Å —Ç–µ—Ä–º–∏–Ω–∞–ª", "–ó–∞–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä", "–ó–∞–≤–∏—Å–ª–∏ –∫–Ω–æ–ø–∫–∏", "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—á–µ—Ä–µ–¥—å—é"]
other_functions = "<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:</i> \n" \
                  "<b>–ê–ò–°, –ü–ö –ü–í–î, 1C, –û—á–µ—Ä–µ–¥—å</b> \n" \
                  "/ais - üñ•Ô∏è –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ê–ò–° \n" \
                  "/pkpvd - üìã –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ü–ö –ü–í–î \n" \
                  "/1c - üìö –≤–æ–ø—Ä–æ—Å—ã –ø–æ 1C \n" \
                  "/queue - ‚è≥ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ \n" \
                  "<b>–¢–µ—Ö–Ω–∏–∫–∞ –∏ –¥—Ä—É–≥–æ–µ</b> \n" \
                  "/printer - üñ®Ô∏è –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–∏–Ω—Ç–µ—Ä—É \n" \
                  "/cancel - üö´ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ "

class OrderQueue(StatesGroup):
    waiting_for_queue_problem = State()
    waiting_for_queue_talon_problem = State()
    waiting_for_other_queue_problem = State()


async def queue_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # for name in available_queue_problems:
    #     keyboard.add(name)
    keyboard.row(available_queue_problems[0], available_queue_problems[1])
    keyboard.row(available_queue_problems[2], available_queue_problems[3])
    keyboard.row(available_queue_problems[4])
    await message.answer("‚è≥ –ö–∞–∫–∞—è —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—á–µ—Ä–µ–¥—å—é? ", reply_markup=keyboard)
    await OrderQueue.waiting_for_queue_problem.set()


async def queue_problem_chosen(message: types.Message, state: FSMContext):
    if message.text not in available_queue_problems:
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ. ‚ö†")
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.row(available_queue_problems[0], available_queue_problems[1])
        keyboard.row(available_queue_problems[2], available_queue_problems[3])
        keyboard.row(available_queue_problems[4])
        await message.answer("‚è≥ –ö–∞–∫–∞—è —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—á–µ—Ä–µ–¥—å—é? ", reply_markup=keyboard)
        return
    if message.text in available_queue_problems:
        if message.text == available_queue_problems[len(available_queue_problems) - 1]:
            await state.update_data(chosen_queue_problem=message.text.lower())
            await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É —Å –æ—á–µ—Ä–µ–¥—å—é. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø—Ä–æ–±–ª–µ–º–æ–π.",
                                 reply_markup=types.ReplyKeyboardRemove())
            await OrderQueue.waiting_for_other_queue_problem.set()
        elif message.text == available_queue_problems[0]:
            await state.update_data(chosen_queue_problem=message.text.lower())
            await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –∑–∞–≤–∏—Å—à–∏–º —Ç–∞–ª–æ–Ω–æ–º...",
                                 reply_markup=types.ReplyKeyboardRemove())
            await OrderQueue.waiting_for_queue_talon_problem.set()
        else:
            await state.update_data(chosen_queue_problem=message.text.lower())
            await message.answer("‚ö† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ –≤—ã—Å–ª–∞–Ω–∞ –≤ IT-–æ—Ç–¥–µ–ª",
                                 reply_markup=types.ReplyKeyboardRemove())
            user_data = await state.get_data()
            answer_to_group = f"‚è≥ ‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—á–µ—Ä–µ–¥—å—é: {user_data['chosen_queue_problem'].lower()}"
            await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
            await message.bot.send_message(admin_group_id, answer_to_group)
            await message.forward(admin_group_id)
            await state.finish()



async def queue_other_problem_chosen(message: types.Message, state: FSMContext):
    if message.content_type == 'document':
        answer_to_group = f"‚è≥ ‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—á–µ—Ä–µ–¥—å—é..."
        await message.reply('–í—ã—Å–ª–∞–ª IT-–æ—Ç–¥–µ–ª—É', reply_markup=types.ReplyKeyboardRemove())
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        await message.bot.send_message(admin_group_id, answer_to_group)
        await message.forward(admin_group_id)
        await state.finish()
        # msg_document = message.document.file_id
        # print("msg doc "+msg_document)
        # await message.bot.send_document(admin_group_id, msg_document)
    elif message.content_type == 'photo':
        answer_to_group = f"‚è≥ ‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—á–µ—Ä–µ–¥—å—é..."
        await message.reply('–í—ã—Å–ª–∞–ª IT-–æ—Ç–¥–µ–ª—É', reply_markup=types.ReplyKeyboardRemove())
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        await message.bot.send_message(admin_group_id, answer_to_group)
        await message.forward(admin_group_id)
        await state.finish()
    elif message.content_type == 'text':
        print("test text")
        await state.update_data(chosen_queue_problem=message.text.lower())
        user_data = await state.get_data()
        answer_to_message = f"‚ö† –£ –≤–∞—Å —Ç–µ–∫—É—â–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—á–µ—Ä–µ–¥—å—é: {user_data['chosen_queue_problem'].lower()} \n IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏..."
        answer_to_group = f"‚è≥ ‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—á–µ—Ä–µ–¥—å—é: {user_data['chosen_queue_problem'].lower()}"
        await message.reply(answer_to_message, reply_markup=types.ReplyKeyboardRemove())
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        await message.bot.send_message(admin_group_id, answer_to_group)
        await message.forward(admin_group_id)
        await state.finish()

async def queue_talon_problem(message: types.Message, state: FSMContext):
    if message.content_type == 'document':
        answer_to_group = f"‚è≥ ‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∞–ª–æ–Ω–æ–º –≤ –æ—á–µ—Ä–µ–¥–∏... –ù–∞–¥–æ —á—Ç–æ-—Ç–æ –¥–µ–ª–∞—Ç—å..."
        await message.reply('–í—ã—Å–ª–∞–ª IT-–æ—Ç–¥–µ–ª—É', reply_markup=types.ReplyKeyboardRemove())
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        await message.bot.send_message(admin_group_id, answer_to_group)
        await message.forward(admin_group_id)
        await state.finish()
        # msg_document = message.document.file_id
        # print("msg doc "+msg_document)
        # await message.bot.send_document(admin_group_id, msg_document)
    elif message.content_type == 'photo':
        answer_to_group = f"‚è≥ ‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∞–ª–æ–Ω–æ–º –≤ –æ—á–µ—Ä–µ–¥–∏... –ù–∞–¥–æ —á—Ç–æ-—Ç–æ –¥–µ–ª–∞—Ç—å..."
        await message.reply('–í—ã—Å–ª–∞–ª IT-–æ—Ç–¥–µ–ª—É', reply_markup=types.ReplyKeyboardRemove())
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        await message.bot.send_message(admin_group_id, answer_to_group)
        await message.forward(admin_group_id)
        await state.finish()
    elif message.content_type == 'text':
        print("test text")
        await state.update_data(chosen_queue_problem=message.text.lower())
        user_data = await state.get_data()
        answer_to_message = f"‚ö† –£ –≤–∞—Å —Ç–µ–∫—É—â–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—á–µ—Ä–µ–¥—å—é: {user_data['chosen_queue_problem'].lower()} \n IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏..."
        answer_to_group = f"‚è≥ ‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∞–ª–æ–Ω–æ–º –≤ –æ—á–µ—Ä–µ–¥–∏... –ù–∞–¥–æ —á—Ç–æ-—Ç–æ –¥–µ–ª–∞—Ç—å... {user_data['chosen_queue_problem'].lower()}"
        await message.reply(answer_to_message, reply_markup=types.ReplyKeyboardRemove())
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        await message.bot.send_message(admin_group_id, answer_to_group)
        await message.forward(admin_group_id)
        await state.finish()




def register_handlers_queue(dp: Dispatcher):
    dp.register_message_handler(queue_start, commands="queue", state="*")
    dp.register_message_handler(queue_problem_chosen, state=OrderQueue.waiting_for_queue_problem)
    dp.register_message_handler(queue_talon_problem, content_types=types.ContentType.all(), state=OrderQueue.waiting_for_queue_talon_problem)
    dp.register_message_handler(queue_other_problem_chosen, content_types=types.ContentType.all(), state=OrderQueue.waiting_for_other_queue_problem)
    # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    dp.register_message_handler(queue_start, regexp=regexp_queue, state="*")

