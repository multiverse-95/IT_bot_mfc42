# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è –±–æ—Ç–∞
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from fsm.app.config_reader import load_config
# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
config = load_config("config/bot.ini")
# –ü–æ–ª—É—á–µ–Ω–∏–µ id –∞–¥–º–∏–Ω –≥—Ä—É–ø–ø—ã
admin_group_id = int(config.tg_bot.admin_group_id)
# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
regexp_queue = '(\W|^)–æ—á–µ—Ä–µ–¥—å.*(\W|$)|(\W|^)–ø—Ä–æ–±–ª–µ–º–∞.*–æ—á–µ—Ä–µ–¥.*(\W|$)|(\W|^)–Ω–µ\s—Ä–∞–±–æ—Ç.*–æ—á–µ—Ä–µ–¥.*(\W|$)'
# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º –ø–æ –æ—á–µ—Ä–µ–¥–∏
available_queue_problems = ["–ó–∞–≤–∏—Å —Ç–∞–ª–æ–Ω", "–ó–∞–≤–∏—Å —Ç–µ—Ä–º–∏–Ω–∞–ª", "–ó–∞–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä", "–ó–∞–≤–∏—Å–ª–∏ –∫–Ω–æ–ø–∫–∏", "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—á–µ—Ä–µ–¥—å—é"]
# –î—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
other_functions = "<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:</i> \n" \
                  "<b>–ê–ò–°, –ü–ö –ü–í–î, 1C, –û—á–µ—Ä–µ–¥—å</b> \n" \
                  "/ais - üñ•Ô∏è –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ê–ò–° \n" \
                  "/pkpvd - üìã –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ü–ö –ü–í–î \n" \
                  "/1c - üìö –≤–æ–ø—Ä–æ—Å—ã –ø–æ 1C \n" \
                  "/queue - ‚è≥ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ \n" \
                  "<b>–¢–µ—Ö–Ω–∏–∫–∞ –∏ –¥—Ä—É–≥–æ–µ</b> \n" \
                  "/printer - üñ®Ô∏è –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–∏–Ω—Ç–µ—Ä—É \n" \
                  "/cancel - üö´ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ "
# –ö–ª–∞—Å—Å –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
class OrderQueue(StatesGroup):
    waiting_for_queue_problem = State()
    waiting_for_queue_talon_problem = State()
    waiting_for_other_queue_problem = State()

# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –æ—á–µ—Ä–µ–¥—å—é
async def queue_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # for name in available_queue_problems:
    #     keyboard.add(name)
    # –†–∞—Å–ø–æ–ª–æ–∂–∏–º –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    keyboard.row(available_queue_problems[0], available_queue_problems[1])
    keyboard.row(available_queue_problems[2], available_queue_problems[3])
    keyboard.row(available_queue_problems[4])
    # –ë–æ—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É —Å –æ—á–µ—Ä–µ–¥—å—é
    await message.answer("‚è≥ –ö–∞–∫–∞—è —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—á–µ—Ä–µ–¥—å—é? ", reply_markup=keyboard)
    # –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—á–µ—Ä–µ–¥—å—é
    await OrderQueue.waiting_for_queue_problem.set()

# –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—á–µ—Ä–µ–¥—å—é
async def queue_problem_chosen(message: types.Message, state: FSMContext):
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω –Ω–µ –∏–∑ –∫–Ω–æ–ø–æ–∫
    if message.text not in available_queue_problems:
        # –ë–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ. ‚ö†")
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        # –†–∞—Å–ø–æ–ª–æ–∂–∏–º –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        keyboard.row(available_queue_problems[0], available_queue_problems[1])
        keyboard.row(available_queue_problems[2], available_queue_problems[3])
        keyboard.row(available_queue_problems[4])
        # –ë–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç –ø—Ä–æ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É —Å –æ—á–µ—Ä–µ–¥—å—é
        await message.answer("‚è≥ –ö–∞–∫–∞—è —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—á–µ—Ä–µ–¥—å—é? ", reply_markup=keyboard)
        return
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–Ω–æ–ø–æ–∫
    if message.text in available_queue_problems:
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –¥—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—á–µ—Ä–µ–¥—å—é
        if message.text == available_queue_problems[len(available_queue_problems) - 1]:
            # –ó–∞–ø–∏—Å—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            await state.update_data(chosen_queue_problem=message.text.lower())
            # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ–æ–±—â–∏—Ç—å –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É —Å –æ—á–µ—Ä–µ–¥—å—é
            await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É —Å –æ—á–µ—Ä–µ–¥—å—é. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø—Ä–æ–±–ª–µ–º–æ–π.",
                                 reply_markup=types.ReplyKeyboardRemove())
            # –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await OrderQueue.waiting_for_other_queue_problem.set()
        # –ò–Ω–∞—á–µ, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–≤–∏—Å—à–∏–º —Ç–∞–ª–æ–Ω–æ–º
        elif message.text == available_queue_problems[0]:
            # –ó–∞–ø–∏—Å—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
            await state.update_data(chosen_queue_problem=message.text.lower())
            # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∑–∞–≤–∏—Å—à–∏–π —Ç–∞–ª–æ–Ω
            await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –∑–∞–≤–∏—Å—à–∏–º —Ç–∞–ª–æ–Ω–æ–º...",
                                 reply_markup=types.ReplyKeyboardRemove())
            # –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
            await OrderQueue.waiting_for_queue_talon_problem.set()
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        else:
            # –ó–∞–ø–∏—Å—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            await state.update_data(chosen_queue_problem=message.text.lower())
            # –ë–æ—Ç —Å–æ–æ–±—â–∞–µ, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—ã—Å–ª–∞–Ω–∞ –≤ it-–æ—Ç–¥–µ–ª
            await message.answer("‚ö† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ –≤—ã—Å–ª–∞–Ω–∞ –≤ IT-–æ—Ç–¥–µ–ª",
                                 reply_markup=types.ReplyKeyboardRemove())
            # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            user_data = await state.get_data()
            # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            answer_to_group = f"‚è≥ ‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—á–µ—Ä–µ–¥—å—é: {user_data['chosen_queue_problem'].lower()}"
            # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
            # –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            await message.bot.send_message(admin_group_id, answer_to_group)
            # –ë–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.forward(admin_group_id)
            # –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.finish()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º —Å –æ—á–µ—Ä–µ–¥—å—é
async def queue_other_problem_chosen(message: types.Message, state: FSMContext):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç
    if message.content_type == 'document':
        # –û—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø—É
        answer_to_group = f"‚è≥ ‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—á–µ—Ä–µ–¥—å—é..."
        # –ë–æ—Ç —Å–æ–æ–±—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≥—Ä—É–ø–ø—É
        await message.reply('–í—ã—Å–ª–∞–ª IT-–æ—Ç–¥–µ–ª—É', reply_markup=types.ReplyKeyboardRemove())
        # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        # –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        await message.bot.send_message(admin_group_id, answer_to_group)
        # –ë–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        await message.forward(admin_group_id)
        # –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        # msg_document = message.document.file_id
        # print("msg doc "+msg_document)
        # await message.bot.send_document(admin_group_id, msg_document)
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    elif message.content_type == 'photo':
        # –û—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø—É
        answer_to_group = f"‚è≥ ‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—á–µ—Ä–µ–¥—å—é..."
        # –ë–æ—Ç —Å–æ–æ–±—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≥—Ä—É–ø–ø—É
        await message.reply('–í—ã—Å–ª–∞–ª IT-–æ—Ç–¥–µ–ª—É', reply_markup=types.ReplyKeyboardRemove())
        # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        # –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        await message.bot.send_message(admin_group_id, answer_to_group)
        # –ë–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        await message.forward(admin_group_id)
        # –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    elif message.content_type == 'text':
        print("test text")
        # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        await state.update_data(chosen_queue_problem=message.text.lower())
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        user_data = await state.get_data()
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        answer_to_message = f"‚ö† –£ –≤–∞—Å —Ç–µ–∫—É—â–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—á–µ—Ä–µ–¥—å—é: {user_data['chosen_queue_problem'].lower()} \n IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏..."
        # –°–æ–æ–±—â–µ–Ω–∏—é –≤ –≥—Ä—É–ø–ø—É
        answer_to_group = f"‚è≥ ‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—á–µ—Ä–µ–¥—å—é: {user_data['chosen_queue_problem'].lower()}"
        # –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply(answer_to_message, reply_markup=types.ReplyKeyboardRemove())
        # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        # –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        await message.bot.send_message(admin_group_id, answer_to_group)
        # –ë–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        await message.forward(admin_group_id)
        # –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∞–ª–æ–Ω–æ–º
async def queue_talon_problem(message: types.Message, state: FSMContext):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç
    if message.content_type == 'document':
        # –°–æ–æ–±—â–µ–Ω–∏—é –≤ –≥—Ä—É–ø–ø—É
        answer_to_group = f"‚è≥ ‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∞–ª–æ–Ω–æ–º –≤ –æ—á–µ—Ä–µ–¥–∏... –ù–∞–¥–æ —á—Ç–æ-—Ç–æ –¥–µ–ª–∞—Ç—å..."
        # –ë–æ—Ç —Å–æ–æ–±—â–∞–µ—Ç –≤ it-–æ—Ç–¥–µ–ª
        await message.reply('–í—ã—Å–ª–∞–ª IT-–æ—Ç–¥–µ–ª—É', reply_markup=types.ReplyKeyboardRemove())
        # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        # –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        await message.bot.send_message(admin_group_id, answer_to_group)
        # –ë–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        await message.forward(admin_group_id)
        # –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        # msg_document = message.document.file_id
        # print("msg doc "+msg_document)
        # await message.bot.send_document(admin_group_id, msg_document)
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    elif message.content_type == 'photo':
        # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        answer_to_group = f"‚è≥ ‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∞–ª–æ–Ω–æ–º –≤ –æ—á–µ—Ä–µ–¥–∏... –ù–∞–¥–æ —á—Ç–æ-—Ç–æ –¥–µ–ª–∞—Ç—å..."
        # –ë–æ—Ç —Å–æ–æ–±—â–∞–µ—Ç –≤ it-–æ—Ç–¥–µ–ª
        await message.reply('–í—ã—Å–ª–∞–ª IT-–æ—Ç–¥–µ–ª—É', reply_markup=types.ReplyKeyboardRemove())
        # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        # –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        await message.bot.send_message(admin_group_id, answer_to_group)
        # –ë–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        await message.forward(admin_group_id)
        # –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Ç–µ–∫—Å—Ç
    elif message.content_type == 'text':
        print("test text")
        # –ó–∞–ø–∏—Å—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        await state.update_data(chosen_queue_problem=message.text.lower())
        # –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ —Å–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        user_data = await state.get_data()
        # –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        answer_to_message = f"‚ö† –£ –≤–∞—Å —Ç–µ–∫—É—â–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—á–µ—Ä–µ–¥—å—é: {user_data['chosen_queue_problem'].lower()} \n IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏..."
        # –û—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø—É
        answer_to_group = f"‚è≥ ‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∞–ª–æ–Ω–æ–º –≤ –æ—á–µ—Ä–µ–¥–∏... –ù–∞–¥–æ —á—Ç–æ-—Ç–æ –¥–µ–ª–∞—Ç—å... {user_data['chosen_queue_problem'].lower()}"
        # –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.reply(answer_to_message, reply_markup=types.ReplyKeyboardRemove())
        # –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        # –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        await message.bot.send_message(admin_group_id, answer_to_group)
        # –ë–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        await message.forward(admin_group_id)
        # –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
def register_handlers_queue(dp: Dispatcher):
    # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –æ—á–µ—Ä–µ–¥–∏
    dp.register_message_handler(queue_start, commands="queue", state="*")
    # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—á–µ—Ä–µ–¥—å—é
    dp.register_message_handler(queue_problem_chosen, state=OrderQueue.waiting_for_queue_problem)
    # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∞–ª–æ–Ω–æ–º
    dp.register_message_handler(queue_talon_problem, content_types=types.ContentType.all(), state=OrderQueue.waiting_for_queue_talon_problem)
    # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –¥—Ä—É–≥–æ–π –ø—Ä–æ–±–ª–µ–º—ã
    dp.register_message_handler(queue_other_problem_chosen, content_types=types.ContentType.all(), state=OrderQueue.waiting_for_other_queue_problem)
    # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    dp.register_message_handler(queue_start, regexp=regexp_queue, state="*")

