import asyncio
import logging

from aiogram import Bot, Dispatcher
from aiogram.types import BotCommand
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from app.config_reader import load_config
from app.handlers.ais import register_handlers_ais
from app.handlers.pkpvd import register_handlers_pkpvd
from app.handlers.buh1C import register_handlers_buh_1C
from app.handlers.queue_mfc import register_handlers_queue
from app.handlers.printer import register_handlers_printer
from app.handlers.common import register_handlers_common

logger = logging.getLogger(__name__)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Telegram
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="/start", description="üîë –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"),
        BotCommand(command="/help", description="‚ùì –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"),
        BotCommand(command="/ais", description="üñ•Ô∏è –í–æ–ø—Ä–æ—Å—ã –ø–æ –ê–ò–°"),
        BotCommand(command="/pkpvd", description="üìã –í–æ–ø—Ä–æ—Å—ã –ø–æ –ü–ö –ü–í–î"),
        BotCommand(command="/1c", description="üìö –í–æ–ø—Ä–æ—Å—ã –ø–æ 1C"),
        BotCommand(command="/queue", description="‚è≥ –í–æ–ø—Ä–æ—Å—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏"),
        BotCommand(command="/printer", description="üñ®Ô∏è –í–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–∏–Ω—Ç–µ—Ä—É"),
        BotCommand(command="/cancel", description="üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    ]
    await bot.set_my_commands(commands)


async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ stdout
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    )
    logger.error("Starting bot")

    # –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config("config/bot.ini")

    # –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
    bot = Bot(token=config.tg_bot.token)
    dp = Dispatcher(bot, storage=MemoryStorage())

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
    register_handlers_common(dp)
    register_handlers_ais(dp)
    register_handlers_pkpvd(dp)
    register_handlers_buh_1C(dp)
    register_handlers_queue(dp)
    register_handlers_printer(dp)


    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    await set_commands(bot)

    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
    await dp.start_polling()


if __name__ == '__main__':
    try:
        asyncio.get_event_loop().run_until_complete(main())
    except KeyboardInterrupt:
        print("Bot is finished!")
