import requests
import json
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from fsm.app.admin_authorization.pkpvd_authorization_admin import PkpvdAuthorization
# –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å, —Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ
# from app.pkpvd_authorization.pkpvd_authorization_admin import pkpvdAuthorization

from aiogram.types import ParseMode
from fsm.app.config_reader import load_config

config = load_config("config/bot.ini")
admin_group_id = int(config.tg_bot.admin_group_id)

available_pkpvd_problems = ["–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –∑–∞–≤–∏—Å–∞–µ—Ç –ü–ö –ü–í–î", "–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏"]
available_pkpvd_errors = {
    'Duplicate unique value [usage Purpose] declared for identity constraint of element \"note Group\".':
        '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ \n1.–ù–∞–π—Ç–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ –≤–æ–π—Ç–∏ –≤ –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, –≤—Ä—É—á–Ω—É—é –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫—É ¬´–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–¥–∞–Ω–∏—è¬ª (–Ω–∞–∂–∞—Ç—å –Ω–∞ —Å–µ—Ä—ã–π –∫—Ä–µ—Å—Ç–∏–∫)'
        '\n2.–í –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∂–∏–ª–æ–µ –∏–ª–∏ –Ω–µ–∂–∏–ª–æ–µ \n3.–í—ã–±—Ä–∞—Ç—å –≤–∏–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
    '–∫–∏—Ä–∏–ª–ª–∏—Ü–∞, –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã, "The value"': '–ù–µ—Ç–æ—á–Ω–æ —É–∫–∞–∑–∞–Ω–∞ –ø–æ—á—Ç–∞',
    '—É–∫–∞–∑–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤–∏–¥–∞ [1-0, a-Z, –∞-–Ø]': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–æ–ª—è',
    './doc:idPayer': '–í "–ü–ª–∞—Ç—ë–∂–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö" –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ "–ü–ª–∞—Ç–µ–ª—å—â–∏–∫"',
    'acceptActionNotification':
        '–í –ø–æ–ª–µ "–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤" —Å–ª–µ–¥—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–æ–ª—è ‚Ññ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∞–¥—Ä–µ—Å–∞ e-mail, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã',
    'Duplicate key value [...] declared for identity constraint of element "statementFormChangeRegisteredStatement"':
        '–í –∑–∞—è–≤–ª–µ–Ω–∏–∏ –¥–≤–∞ –∑–∞—è–≤–∏—Ç–µ–ª—è',
    'cvc-pattern-valid: Value \'008002099000\' is not facet-valid with respect to pattern \'008001\d{6}\' for type':
        '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤—ã–±—Ä–∞–ª —Ç–∏–ø "–ò–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç"'
}
other_functions = "<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:</i> \n" \
                  "<b>–ê–ò–°, –ü–ö –ü–í–î, 1C, –û—á–µ—Ä–µ–¥—å</b> \n" \
                  "/ais - üñ•Ô∏è –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ê–ò–° \n" \
                  "/pkpvd - üìã –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ü–ö –ü–í–î \n" \
                  "/1c - üìö –≤–æ–ø—Ä–æ—Å—ã –ø–æ 1C \n" \
                  "/queue - ‚è≥ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ \n" \
                  "<b>–¢–µ—Ö–Ω–∏–∫–∞ –∏ –¥—Ä—É–≥–æ–µ</b> \n" \
                  "/printer - üñ®Ô∏è –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–∏–Ω—Ç–µ—Ä—É \n" \
                  "/cancel - üö´ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ "


class OrderPkpvd(StatesGroup):
    waiting_for_pkpvd_problem = State()
    waiting_for_other_pkpvd_problem = State()
    waiting_for_pkpvd_request_problem = State()
    waiting_for_pkpvd_request_problem_try_again = State()


async def pkpvd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).row(*available_pkpvd_problems)
    # for name in available_pkpvd_problems:
    #     keyboard.add(name)
    await message.answer("üìã –ö–∞–∫–∞—è —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º–∞ —Å –ü–ö –ü–í–î? ", reply_markup=keyboard)
    await OrderPkpvd.waiting_for_pkpvd_problem.set()


async def pkpvd_problem_chosen(message: types.Message, state: FSMContext):
    if message.text not in available_pkpvd_problems:
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ. ‚ö†")
        return
    if message.text in available_pkpvd_problems:
        if message.text == available_pkpvd_problems[len(available_pkpvd_problems) - 1]:
            await state.update_data(chosen_pkpvd_request_problem=message.text.lower())
            await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è",
                                 reply_markup=types.ReplyKeyboardRemove())
            await OrderPkpvd.waiting_for_pkpvd_request_problem.set()
        else:
            await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è —É –≤–∞—Å —Å–ª—É—á–∏–ª–∞—Å—å —Å –ü–ö –ü–í–î. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø—Ä–æ–±–ª–µ–º–æ–π.",
                                 reply_markup=types.ReplyKeyboardRemove())
            await OrderPkpvd.waiting_for_other_pkpvd_problem.set()


async def pkpvd_other_problem_chosen(message: types.Message, state: FSMContext):
    if message.content_type == 'document':
        answer_to_group = f"üìã ‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å –ü–ö –ü–í–î..."
        await message.reply('–í—ã—Å–ª–∞–ª IT-–æ—Ç–¥–µ–ª—É', reply_markup=types.ReplyKeyboardRemove())
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        await message.bot.send_message(admin_group_id, answer_to_group)
        await message.forward(admin_group_id)
        await state.finish()
        # msg_document = message.document.file_id
        # print("msg doc "+msg_document)
        # await message.bot.send_document(admin_group_id, msg_document)
    elif message.content_type == 'photo':
        answer_to_group = f"üìã ‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å –ü–ö –ü–í–î..."
        await message.reply('–í—ã—Å–ª–∞–ª IT-–æ—Ç–¥–µ–ª—É', reply_markup=types.ReplyKeyboardRemove())
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        await message.bot.send_message(admin_group_id, answer_to_group)
        await message.forward(admin_group_id)
        await state.finish()
    elif message.content_type == 'text':
        print("test text")
        await state.update_data(chosen_pkpvd_problem=message.text.lower())
        user_data = await state.get_data()
        answer_to_message = f"‚ö† –£ –≤–∞—Å —Ç–µ–∫—É—â–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –ü–ö –ü–í–î: {user_data['chosen_pkpvd_problem'].lower()} \n IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏..."
        answer_to_group = f"üìã ‚ö† –ü—Ä–æ–±–ª–µ–º–∞ —Å –ü–ö –ü–í–î: {user_data['chosen_pkpvd_problem'].lower()}"
        await message.reply(answer_to_message, reply_markup=types.ReplyKeyboardRemove())
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        await message.bot.send_message(admin_group_id, answer_to_group)
        await message.forward(admin_group_id)
        await state.finish()
    # return SendMessage(admin_group_id, answer_to_group)


async def pkpvd_request_problem(message: types.Message, state: FSMContext):
    await message.answer("‚ö† ‚è±Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏—â—É —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã...",
                         reply_markup=types.ReplyKeyboardRemove())
    pkpvd_author = PkpvdAuthorization()
    cookie_pkpvd = await pkpvd_author.read_cookie_from_file()
    isCookieValid = await pkpvd_author.check_if_cookie_valid(cookie_pkpvd)
    if not isCookieValid:
        cookie_pkpvd = await pkpvd_author.admin_authorization()
        await pkpvd_author.save_data_to_file(cookie_pkpvd)

    number_of_req = message.text.upper()
    responseAppeal = requests.get(
        'http://10.42.200.207/api/rs/appeal/search2?page=0&size=5&sort=createDate,desc&startWith=false&internalNum='+number_of_req+'&packageNum'
        '=&statusNotePPOZ=&currentStep=&createDateFrom=&createDateTill=&createWho=&moveStepDate=&kudNum=&routineExecutionDays=&processingEndDateFrom='
        '&processingEndDateTill=&typeGosUslug=&cn=&textApplicants=',
        headers={'Cookie': 'JSESSIONID=' + cookie_pkpvd})

    resp_json = responseAppeal.text
    parsed_string = json.loads(resp_json)
    if len(parsed_string['content']) == 0:
        await message.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.row('–¥–∞', '–Ω–µ—Ç')
        await message.answer("–ü–æ–±—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?", reply_markup=keyboard)
        await OrderPkpvd.waiting_for_pkpvd_request_problem_try_again.set()
    else:
        id_appeal = parsed_string['content'][0]['id']
        print("JSON Appeal: ", parsed_string)

        responseStatement = requests.get('http://10.42.200.207/api/rs/appeal/' + id_appeal + '/statement?page=0&size=5',
                                         headers={'Cookie': 'JSESSIONID=' + cookie_pkpvd})

        resp_json = responseStatement.text
        parsed_string = json.loads(resp_json)
        id_statement = parsed_string['content'][0]['id']
        print("JSON Statement: ", parsed_string)

        responseFindErrror = requests.get(
            'http://10.42.200.207/api/rs/appeal/' + id_appeal + '/' + id_statement + '/printstatement',
            headers={'Cookie': 'JSESSIONID=' + cookie_pkpvd})

        resp_document = responseFindErrror.text
        # parsed_string = json.loads(resp_json)
        # print("JSON print document: ", resp_document)

        isDocError = True

        try:
            json.loads(resp_document)
        except ValueError as err:
            isDocError = False

        print('–î–æ–∫—É–º–µ–Ω—Ç —Å –æ—à–∏–±–∫–æ–π? ' + str(isDocError))
        documentCorrect = "–° –≤–∞—à–∏–º –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ."
        if isDocError:
            parsed_document_error = json.loads(resp_document)
            code_error = parsed_document_error['status']
            message_error = parsed_document_error['message']
            # message_error = '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è XML-—Ñ–∞–π–ª–∞: Duplicate unique value [usage Purpose] declared for identity constraint of element \"note Group\". '
            fix_not_found = '–†–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'

            list_code_errors = list(available_pkpvd_errors.keys())
            # print(list_code_errors[0])
            solveError = 'Not solved'
            for i in range(len(available_pkpvd_errors)):
                print('\n' + '–û—à–∏–±–∫–∞: ' + list_code_errors[i])
                index = message_error.find(list_code_errors[i])
                if index == -1:
                    print('Not found')
                else:
                    print('–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π: ' + available_pkpvd_errors[list_code_errors[i]])
                    solveError = available_pkpvd_errors[list_code_errors[i]]
                    break

            if solveError == 'Not solved':
                print('–†–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...')
                await message.answer(fix_not_found)
                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                keyboard.row('–¥–∞', '–Ω–µ—Ç')
                await message.answer("–ü–æ–±—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?", reply_markup=keyboard)
                await OrderPkpvd.waiting_for_pkpvd_request_problem_try_again.set()
            else:
                print('–ö–∞–∫ —Ä–µ—à–∏—Ç—å: ' + solveError)
                await message.answer(solveError)
                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                keyboard.row('–¥–∞', '–Ω–µ—Ç')
                await message.answer("–ü–æ–±—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?", reply_markup=keyboard)
                await OrderPkpvd.waiting_for_pkpvd_request_problem_try_again.set()
        else:
            await message.answer(documentCorrect)
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.row('–¥–∞', '–Ω–µ—Ç')
            await message.answer("–ü–æ–±—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?", reply_markup=keyboard)
            await OrderPkpvd.waiting_for_pkpvd_request_problem_try_again.set()



async def pkpvd_request_problem_try_again(message: types.Message, state: FSMContext):
    if message.text.lower() == '–¥–∞':
        # await state.update_data(chosen_pkpvd_request_problem=message.text.lower())
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è",
                             reply_markup=types.ReplyKeyboardRemove())
        await OrderPkpvd.waiting_for_pkpvd_request_problem.set()
    elif message.text.lower() == '–Ω–µ—Ç':
        await message.answer(other_functions, reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
        await state.finish()
    else:
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∏–∂–µ\n"
                             "–ü–æ–±—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?")


def register_handlers_pkpvd(dp: Dispatcher):
    dp.register_message_handler(pkpvd_start, commands="pkpvd", state="*")
    dp.register_message_handler(pkpvd_problem_chosen, state=OrderPkpvd.waiting_for_pkpvd_problem)
    dp.register_message_handler(pkpvd_request_problem, state=OrderPkpvd.waiting_for_pkpvd_request_problem)
    dp.register_message_handler(pkpvd_request_problem_try_again, state=OrderPkpvd.waiting_for_pkpvd_request_problem_try_again)
    dp.register_message_handler(pkpvd_other_problem_chosen, content_types=types.ContentType.all(), state=OrderPkpvd.waiting_for_other_pkpvd_problem)

